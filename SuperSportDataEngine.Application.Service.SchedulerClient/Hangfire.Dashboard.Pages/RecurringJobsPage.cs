#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hangfire.Dashboard.Pages
{

#line 2 "..\..\Dashboard\Pages\RecurringJobsPage.cshtml"
    using System;




#line 3 "..\..\Dashboard\Pages\RecurringJobsPage.cshtml"
    using System.Collections.Generic;



    using System.Linq;
    using System.Text;

#line 4 "..\..\Dashboard\Pages\RecurringJobsPage.cshtml"
    using Hangfire.Dashboard;




#line 5 "..\..\Dashboard\Pages\RecurringJobsPage.cshtml"
    using Hangfire.Dashboard.Pages;




#line 6 "..\..\Dashboard\Pages\RecurringJobsPage.cshtml"
    using Hangfire.Dashboard.Resources;




#line 7 "..\..\Dashboard\Pages\RecurringJobsPage.cshtml"
    using Hangfire.States;




#line 8 "..\..\Dashboard\Pages\RecurringJobsPage.cshtml"
    using Hangfire.Storage;




    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    internal partial class RecurringJobsPage : RazorPage
    {


        public override void Execute()
        {
            WriteLiteral("\r\n");

            Layout = new LayoutPage(Strings.RecurringJobsPage_Title);
            List<RecurringJobDto> recurringJobs;

            int from, perPage;

            int.TryParse(Query("from"), out from);
            int.TryParse(Query("count"), out perPage);

            Pager pager = null;

            using (var connection = Storage.GetConnection())
            {
                var storageConnection = connection as JobStorageConnection;
                if (storageConnection != null)
                {
                    pager = new Pager(from, perPage, storageConnection.GetRecurringJobCount());
                    recurringJobs = storageConnection.GetRecurringJobs(pager.FromRecord, pager.FromRecord + pager.RecordsPerPage - 1);
                }
                else
                {
                    recurringJobs = connection.GetRecurringJobs();
                }
            }

            WriteLiteral("\r\n<div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n        <h1 class=\"page-header\"" + ">");

            Write(Strings.RecurringJobsPage_Title);
            WriteLiteral("</h1>\r\n\r\n");



            if (recurringJobs.Count == 0)
            {
                WriteLiteral("<div class=\"alert alert-info\">\r\n");
                Write(Strings.RecurringJobsPage_NoJobs);
                WriteLiteral("\r\n            </div>\r\n");
            }
            else
            {
                WriteLiteral("            <div class=\"js-jobs-list\">\r\n                <div class=\"btn-toolbar b" +
                "tn-toolbar-top\">\r\n                    <button class=\"js-jobs-list-command btn bt" +
                "n-sm btn-primary\"\r\n                            data-url=\"");
                Write(Url.To("/recurring/trigger"));
                WriteLiteral("\"\r\n                            data-loading-text=\"");
                Write(Strings.RecurringJobsPage_Triggering);
                WriteLiteral("\"\r\ndisabled=\"disabled\">\r\n<spa" + "n class=\"glyphicon glyphicon-play-circle\"></span>\r\n                        ");
                Write(Strings.RecurringJobsPage_TriggerNow);
                WriteLiteral("\r\n                    </button>\r\n\r\n                    <button class=\"js-jobs-lis" +
                "t-command btn btn-sm btn-default\"\r\n                            data-url=\"");
                Write(Url.To("/recurring/remove"));
                WriteLiteral("\"\r\n                            data-loading-text=\"");
                Write(Strings.Common_Deleting);
                WriteLiteral("\"\r\n                            data-confirm=\"");
                Write(Strings.Common_DeleteConfirm);
                WriteLiteral("\"\r\n                            disabled=\"disabled\">\r\n                        <spa" +
                "n class=\"glyphicon glyphicon-remove\"></span>\r\n                        ");
                Write(Strings.Common_Delete);
                WriteLiteral("\r\n                    </button>\r\n\r\n");

                if (pager != null)
                {




                    WriteLiteral("                        ");

                    WriteLiteral(" ");



                    Write(Html.PerPageSelector(pager));
                    
                    WriteLiteral("\r\n");
                }


                WriteLiteral(@"                </div>

                <div class=""table-responsive"">
                    <table class=""table"">
                        <thead>
                            <tr>
                                <th class=""min-width"">
                                    <input type=""checkbox"" class=""js-jobs-list-select-all"" />
                                </th>
                                <th class=""min-width"">");



                Write(Strings.Common_Id);
                WriteLiteral("</th>\r\n                                <th class=\"min-width\">");
                Write(Strings.RecurringJobsPage_Table_Cron);
                WriteLiteral("</th>\r\n                                <th class=\"min-width\">");
                Write(Strings.RecurringJobsPage_Table_TimeZone);
                WriteLiteral("</th>\r\n                                <th>");
                Write(Strings.RecurringJobsPage_Table_NextExecution);
                WriteLiteral("</th>\r\n                                <th class=\"align-right min-width\">");
                Write(Strings.RecurringJobsPage_Table_LastExecution);
                WriteLiteral("</th>\r\n                                <th class=\"align-left min-width\">");

                foreach (var job in recurringJobs)
                {
                    WriteLiteral("                                <tr class=\"js-jobs-list-row hover\">\r\n            " +
                    "                        <td>\r\n                                        <input typ" +
                    "e=\"checkbox\" class=\"js-jobs-list-checkbox\" name=\"jobs[]\" value=\"");

                    Write(job.Id);
                    WriteLiteral("\" />\r\n                                    </td>\r\n                                " +
                    "    <td class=\"min-width\">");

                    Write(job.Id);

                    WriteLiteral("</td>\r\n                                    <td class=\"min-width\">\r\n              " +
                    "                          ");
                    WriteLiteral("\r\n");

                    string cronDescription = null;
#if NETFULL
                                            try
                                            {
                                                cronDescription = string.IsNullOrEmpty(job.Cron) ? null : CronExpressionDescriptor.ExpressionDescriptor.GetDescription(job.Cron);
                                            }
                                            catch (FormatException)
                                            {
                                            }
#endif
                    WriteLiteral("\r\n");
                    if (cronDescription != null)
                    {
                        WriteLiteral("                                            <code title=\"");
                        Write(cronDescription);
                        WriteLiteral("\">");
                        Write(job.Cron);
                        WriteLiteral("</code>\r\n");
                    }
                    else
                    {
                        WriteLiteral("                                            <code>");
                        Write(job.Cron);
                        WriteLiteral("</code>\r\n");
                    }
                    WriteLiteral("                                    </td>\r\n                                    <t" +
                    "d class=\"min-width\">\r\n");

                    if (!String.IsNullOrWhiteSpace(job.TimeZoneId))
                    {
                        WriteLiteral("                                            <span title=\"");
                        Write(TimeZoneInfo.FindSystemTimeZoneById(job.TimeZoneId).DisplayName);
                        WriteLiteral("\" data-container=\"body\">");
                        Write(job.TimeZoneId);
                        WriteLiteral("</span>\r\n");
                    }
                    else
                    {
                        WriteLiteral("                                            ");
                        WriteLiteral(" UTC\r\n");
                    }
                    WriteLiteral("                                    </td>\r\n                                    <t" +
                    "d class=\"word-break\">\r\n");

                    if (job.Job != null)
                    {
                    }
                    else
                    {
                    }

                    if (job.NextExecution != null)
                    {
                        Write(Html.RelativeTime(job.NextExecution.Value));
                    }
                    else
                    {
                        WriteLiteral("                                            <em>");
                        Write(Strings.Common_NotAvailable);
                        WriteLiteral("</em>\r\n");
                    }
                    WriteLiteral("                                    </td>\r\n                                    <t" +
                    "d class=\"align-left min-width\">\r\n");

                    if (job.LastExecution != null)
                    {
                        if (!String.IsNullOrEmpty(job.LastJobId))
                        {
                            WriteLiteral("                                                <a href=\"");
                            Write(Url.JobDetails(job.LastJobId));
                            WriteLiteral("\">\r\n                                                    <span class=\"label label-" +
                            "default label-hover\" style=\"");
                            Write($"background-color: {JobHistoryRenderer.GetForegroundStateColor(job.LastJobState ?? EnqueuedState.StateName)};");
                            WriteLiteral("\">\r\n                                                        ");
                            Write(Html.RelativeTime(job.LastExecution.Value));
                            WriteLiteral("\r\n                                                    </span>\r\n                  " +
                            "                              </a>\r\n");
                        }
                        else
                        {
                            WriteLiteral("                                                <em>\r\n                           " +
                            "                         ");
                            Write(Strings.RecurringJobsPage_Canceled);
                            WriteLiteral(" ");
                            Write(Html.RelativeTime(job.LastExecution.Value));
                            WriteLiteral("\r\n                                                </em>\r\n");
                        }
                    }
                    else
                    {
                        WriteLiteral("                                            <em>");
                        Write(Strings.Common_NotAvailable);
                        WriteLiteral("</em>\r\n");
                    }
                    WriteLiteral("                                    </td>\r\n                                    <t" +
                    "d class=\"align-right min-width\">\r\n");

                    if (job.CreatedAt != null)
                    {
                        //Write(Html.RelativeTime(job.CreatedAt.Value));
                    }
                    else
                    {
                        //WriteLiteral("                                            <em>N/A</em>\r\n");
                    }
                    WriteLiteral("                                    </td>\r\n                                </tr>\r" +
                    "\n");
                }
                WriteLiteral("</tbody>\r\n                    </table>\r\n                <" +
                "/div>\r\n\r\n");

                if (pager != null)
                {
                    WriteLiteral("                    ");

                    WriteLiteral(" ");
                    Write(Html.Paginator(pager));
                    WriteLiteral("\r\n");
                }
                WriteLiteral("            </div>\r\n");
            }
            WriteLiteral("    </div>\r\n</div>    ");
        }
    }
}
#pragma warning restore 1591
